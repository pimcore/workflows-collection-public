name: "Codeception tests"

on:
  workflow_call:
    inputs:
      APP_ENV:
        required: true
        type: string
      PIMCORE_TEST:
        required: true
        type: string
      PRIVATE_REPO:
        required: true
        type: string
      PHP_VERSION:
        required: true
        type: string
      DATABASE:
        required: false
        type: string
        default: "mariadb:10.7"
      SERVER_VERSION:
        required: false
        type: string
      DEPENDENCIES:
        required: true
        type: string
      EXPERIMENTAL:
        required: true
        type: string
      PIMCORE_VERSION:
        required: false
        type: string
      REQUIRE_ADMIN_BUNDLE:
        required: false
        type: string
        default: "true"
      PIMCORE_OPEN_SEARCH_HOST:
        required: false
        type: string
        default: "39200"
      PIMCORE_ELASTIC_SEARCH_HOST:
        required: false
        type: string
        default: "39201"
      PIMCORE_ELASTIC_SEARCH_VERSION:
        required: false
        type: string
        default: "8.4.3"
      PIMCORE_OPENSEARCH_VERSION:
        required: false
        type: string
        default: "2"
      COVERAGE:
        required: false
        type: string
        default: "none"
      CACHE_CLEAR:
        required: false
        type: string
        default: "false"
      PRIVATE_PACKAGIST_CANONICAL:
        required: false
        type: string
        default: "true"
      GOTENBERG_DNS:
        required: false
        type: string
        default: "http://127.0.0.1:31234"
      REDIS_DSN:
        required: false
        type: string
        default: "redis://127.0.0.1:63379"

    secrets:
      COMPOSER_PIMCORE_REPO_PACKAGIST_TOKEN:
        required: false
      SSH_PRIVATE_KEY_PIMCORE_DEPLOYMENTS_USER:
        required: false
      GOOGLE_CLIENT_ID:
        required: false
      GOOGLE_CLIENT_SECRET:
        required: false
      PIMCORE_INSTANCE_IDENTIFIER:
        required: false
      PIMCORE_ENCRYPTION_SECRET:
        required: false
      PIMCORE_PRODUCT_KEY:
        required: false

jobs:
  codeception-tests:
    name: "Codeception tests"
    runs-on: "ubuntu-22.04"
    continue-on-error: ${{ inputs.EXPERIMENTAL == 'true' }}
    env:
      SYMFONY_DEPRECATIONS_HELPER: "weak"
      PIMCORE_TEST_DB_DSN: "mysql://root@127.0.0.1:33006/pimcore_test"
      PIMCORE_OPEN_SEARCH_HOST: "localhost:${{ inputs.PIMCORE_OPEN_SEARCH_HOST }}"
      PIMCORE_ELASTIC_SEARCH_HOST: "localhost:${{ inputs.PIMCORE_ELASTIC_SEARCH_HOST }}"
      PIMCORE_PROJECT_ROOT: ${{ github.workspace }}
      APP_ENV: ${{ inputs.APP_ENV }}
      PIMCORE_TEST: ${{ inputs.PIMCORE_TEST }}
      PIMCORE_TEST_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      PIMCORE_TEST_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      PIMCORE_INSTANCE_IDENTIFIER: ${{ secrets.PIMCORE_INSTANCE_IDENTIFIER }}
      PIMCORE_ENCRYPTION_SECRET: ${{ secrets.PIMCORE_ENCRYPTION_SECRET }}
      PIMCORE_PRODUCT_KEY: ${{ secrets.PIMCORE_PRODUCT_KEY }}
      PIMCORE_TEST_REDIS_DSN: ${{inputs.REDIS_DSN}}
      PIMCORE_TEST_GOTENBERG_DNS: ${{inputs.GOTENBERG_DNS}}
    services:
      mariadb:
        image: "${{ inputs.DATABASE }}"
        ports:
          - 33006:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

      opensearch:
        image: opensearchproject/opensearch:${{ inputs.PIMCORE_OPENSEARCH_VERSION }}
        ports:
          - ${{ inputs.PIMCORE_OPEN_SEARCH_HOST }}:9200
        env:
          cluster.name: "opensearch-cluster"
          node.name: "opensearch-node"
          discovery.seed_hosts: "opensearch-node"
          bootstrap.memory_lock: true
          OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: "single-node"
          DISABLE_SECURITY_PLUGIN: true

      elastic:
        image: elasticsearch:${{ inputs.PIMCORE_ELASTIC_SEARCH_VERSION }}
        ports:
          - ${{ inputs.PIMCORE_ELASTIC_SEARCH_HOST }}:9200
        env:
          discovery.type: "single-node"
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          xpack.security.enabled: "true"
          xpack.security.authc.anonymous.roles: "superuser"

      gotenberg:
        image: gotenberg/gotenberg:8
        ports:
          - 31234:3000

      redis:
        image: redis
        ports:
          - 63379:6379

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "${{ inputs.COVERAGE }}"
          extensions: imagick
          ini-values: display_errors=On, display_startup_errors=On, error_reporting=32767
          php-version: "${{ inputs.PHP_VERSION }}"

      - name: "Install Ghostscript and PDFInfo"
        run: |
          sudo apt-get update --allow-releaseinfo-change
          sudo apt-get install -y ghostscript poppler-utils
          
      - name: Verify MariaDB connection
        run: |
          cp .github/ci/files/.my.cnf ~/.my.cnf
          while ! mysqladmin ping --silent; do
            sleep 1
          done


      - name: Verify OpenSearch connection
        run: |
            for i in {1..60}; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9200)
              if [ $STATUS -eq 200 ]; then
                echo "OpenSearch is ready."
                break
              fi
              echo "Waiting for OpenSearch... ($i/60)"
              sleep 1
            done
            if [ $STATUS -ne 200 ]; then
              echo "OpenSearch failed to start"
              exit 1
            fi

      - name: "Create Database"
        run: |
          mysql -e "CREATE DATABASE pimcore_test CHARSET=utf8mb4;"

      - name: "Setup Pimcore environment"
        env:
          REQUIRE_ADMIN_BUNDLE: "${{ inputs.REQUIRE_ADMIN_BUNDLE }}"
        run: |
          chmod 755 .github/ci/scripts/setup-pimcore-environment.sh
          .github/ci/scripts/setup-pimcore-environment.sh

      - name: Install SSH Key # this is necessary for Composer to be able to clone source from pimcore/ee-pimcore
        if: ${{ inputs.PRIVATE_REPO == 'true' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PIMCORE_DEPLOYMENTS_USER }}
          known_hosts: ".... we add this in the next step ;-)"

      - name: "Add authentication for private pimcore packages"
        if: ${{ inputs.PRIVATE_REPO == 'true' }}
        run: |
          composer config repositories.private-packagist '{"type": "composer", "url": "https://repo.pimcore.com/github-actions/", "canonical": ${{ inputs.PRIVATE_PACKAGIST_CANONICAL }}}'
          composer config --global --auth http-basic.repo.pimcore.com github-actions ${{ secrets.COMPOSER_PIMCORE_REPO_PACKAGIST_TOKEN }}

      - name: "Update Pimcore version"
        env:
          PIMCORE_VERSION: "${{ inputs.PIMCORE_VERSION }}"
          REQUIRE_ADMIN_BUNDLE: "${{ inputs.REQUIRE_ADMIN_BUNDLE }}"
        run: |
          if [ ! -z "$PIMCORE_VERSION" ]; then
                composer require --no-update pimcore/pimcore:"${PIMCORE_VERSION}"
          fi

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v3"
        with:
          dependency-versions: "${{ inputs.DEPENDENCIES }}"
      
      - name: "Run cache clear"
        if: ${{ inputs.CACHE_CLEAR == 'true' }}
        run: |
          ./bin/console cache:clear --no-interaction

      - name: "Run Codeception"
        run: "vendor/bin/codecept run -c . -vvv --xml"
